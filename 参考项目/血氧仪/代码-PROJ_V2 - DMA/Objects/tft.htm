<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\tft.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\tft.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Oct 10 17:11:39 2023
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SYS_init &rArr; UART2_init &rArr; USART_Init &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[21]">CLKFAULT_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">CLKFAULT_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC_IRQHandler</a> from interrupts_cw32l031.o(i.ADC_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[13]">ATIM_IRQHandler</a> from interrupts_cw32l031.o(i.ATIM_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[20]">AWT_IRQHandler</a> from interrupts_cw32l031.o(i.AWT_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[18]">BTIM1_IRQHandler</a> from interrupts_cw32l031.o(i.BTIM1_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[19]">BTIM2_IRQHandler</a> from interrupts_cw32l031.o(i.BTIM2_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[1a]">BTIM3_IRQHandler</a> from interrupts_cw32l031.o(i.BTIM3_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[21]">CLKFAULT_IRQHandler</a> from startup_cw32l031.o(.text) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[f]">DMACH1_IRQHandler</a> from interrupts_cw32l031.o(i.DMACH1_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[10]">DMACH23_IRQHandler</a> from interrupts_cw32l031.o(i.DMACH23_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[11]">DMACH4_IRQHandler</a> from interrupts_cw32l031.o(i.DMACH4_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[9]">FLASHRAM_IRQHandler</a> from interrupts_cw32l031.o(i.FLASHRAM_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[b]">GPIOA_IRQHandler</a> from interrupts_cw32l031.o(i.GPIOA_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[c]">GPIOB_IRQHandler</a> from interrupts_cw32l031.o(i.GPIOB_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[d]">GPIOC_IRQHandler</a> from interrupts_cw32l031.o(i.GPIOC_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[e]">GPIOF_IRQHandler</a> from interrupts_cw32l031.o(i.GPIOF_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[16]">GTIM1_IRQHandler</a> from interrupts_cw32l031.o(i.GTIM1_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[17]">GTIM2_IRQHandler</a> from interrupts_cw32l031.o(i.GTIM2_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from interrupts_cw32l031.o(i.HardFault_Handler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[1b]">I2C1_IRQHandler</a> from interrupts_cw32l031.o(i.I2C1_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[7]">LVD_IRQHandler</a> from interrupts_cw32l031.o(i.LVD_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from interrupts_cw32l031.o(i.NMI_Handler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from interrupts_cw32l031.o(i.PendSV_Handler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from interrupts_cw32l031.o(i.RTC_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_cw32l031.o(.text) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[1c]">SPI1_IRQHandler</a> from interrupts_cw32l031.o(i.SPI1_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from interrupts_cw32l031.o(i.SVC_Handler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[a]">SYSCTRL_IRQHandler</a> from startup_cw32l031.o(.text) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from cw32l031_systick.o(i.SysTick_Handler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[23]">SystemInit</a> from system_cw32l031.o(i.SystemInit) referenced from startup_cw32l031.o(.text)
 <LI><a href="#[1d]">UART1_IRQHandler</a> from interrupts_cw32l031.o(i.UART1_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[1e]">UART2_IRQHandler</a> from interrupts_cw32l031.o(i.UART2_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[1f]">UART3_IRQHandler</a> from interrupts_cw32l031.o(i.UART3_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[14]">VC1_IRQHandler</a> from interrupts_cw32l031.o(i.VC1_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[15]">VC2_IRQHandler</a> from interrupts_cw32l031.o(i.VC2_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[6]">WDT_IRQHandler</a> from interrupts_cw32l031.o(i.WDT_IRQHandler) referenced from startup_cw32l031.o(RESET)
 <LI><a href="#[24]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_cw32l031.o(.text)
 <LI><a href="#[25]">fputc</a> from main.o(i.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[22]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[24]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[26]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_cw32l031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CLKFAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cw32l031.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKFAULT_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKFAULT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SYSCTRL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cw32l031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Power
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowBoxing
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowBoxing
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_show
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowBoxing
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowBoxing
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ad]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ae]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[af]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[2b]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[34]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[33]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[40]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__decompress2</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>ADC_AutoStop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cw32l031_adc.o(i.ADC_AutoStop))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[42]"></a>ADC_Configuration</STRONG> (Thumb, 82 bytes, Stack size 120 bytes, main.o(i.ADC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ADC_Configuration &rArr; ADC_SerialChScanModeCfg &rArr; ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg &rArr; ADC_SetSerialCh
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChScanModeCfg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AutoStop
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_init
</UL>

<P><STRONG><a name="[46]"></a>ADC_Enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Enable &rArr; ADC_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[47]"></a>ADC_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[12]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ADC_Init</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[4a]"></a>ADC_SerialChCommon</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_SerialChCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg &rArr; ADC_SetSerialCh
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr0ChannelCfg
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr07ChannelCfg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr06ChannelCfg
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr05ChannelCfg
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr04ChannelCfg
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr03ChannelCfg
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr02ChannelCfg
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr01ChannelCfg
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChScanModeCfg
</UL>

<P><STRONG><a name="[44]"></a>ADC_SerialChScanModeCfg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_SerialChScanModeCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_SerialChScanModeCfg &rArr; ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg &rArr; ADC_SetSerialCh
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[54]"></a>ADC_SetSerialCh</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_SetSerialCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SetSerialCh
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr0ChannelCfg
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr07ChannelCfg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr06ChannelCfg
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr05ChannelCfg
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr04ChannelCfg
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr03ChannelCfg
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr02ChannelCfg
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr01ChannelCfg
</UL>

<P><STRONG><a name="[55]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SoftwareStartConvCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandlerCallback
</UL>

<P><STRONG><a name="[4d]"></a>ADC_Sqr01ChannelCfg</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_Sqr01ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Sqr01ChannelCfg &rArr; ADC_SetSerialCh
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[4e]"></a>ADC_Sqr02ChannelCfg</STRONG> (Thumb, 514 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_Sqr02ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Sqr02ChannelCfg &rArr; ADC_SetSerialCh
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[4f]"></a>ADC_Sqr03ChannelCfg</STRONG> (Thumb, 634 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_Sqr03ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Sqr03ChannelCfg &rArr; ADC_SetSerialCh
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[50]"></a>ADC_Sqr04ChannelCfg</STRONG> (Thumb, 764 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_Sqr04ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Sqr04ChannelCfg &rArr; ADC_SetSerialCh
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[51]"></a>ADC_Sqr05ChannelCfg</STRONG> (Thumb, 884 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_Sqr05ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Sqr05ChannelCfg &rArr; ADC_SetSerialCh
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[52]"></a>ADC_Sqr06ChannelCfg</STRONG> (Thumb, 1004 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_Sqr06ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Sqr06ChannelCfg &rArr; ADC_SetSerialCh
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[53]"></a>ADC_Sqr07ChannelCfg</STRONG> (Thumb, 1166 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_Sqr07ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Sqr07ChannelCfg &rArr; ADC_SetSerialCh
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[4c]"></a>ADC_Sqr0ChannelCfg</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, cw32l031_adc.o(i.ADC_Sqr0ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Sqr0ChannelCfg &rArr; ADC_SetSerialCh
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[13]"></a>ATIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.ATIM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>AWT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.AWT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>BTIM1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_cw32l031.o(i.BTIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = BTIM1_IRQHandler &rArr; BTIM1_IRQHandlerCallback &rArr; transverse_UI_init &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandlerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>BTIM1_IRQHandlerCallback</STRONG> (Thumb, 568 bytes, Stack size 8 bytes, main.o(i.BTIM1_IRQHandlerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = BTIM1_IRQHandlerCallback &rArr; transverse_UI_init &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transverse_UI_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_UI_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare2
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare1
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_Cmd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPin
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_GetITStatus
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ClearITPendingBit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[19]"></a>BTIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.BTIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>BTIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.BTIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>BTIM_ClearITPendingBit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cw32l031_btim.o(i.BTIM_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTIM_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandlerCallback
</UL>

<P><STRONG><a name="[60]"></a>BTIM_Cmd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cw32l031_btim.o(i.BTIM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>BTIM_GetITStatus</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cw32l031_btim.o(i.BTIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandlerCallback
</UL>

<P><STRONG><a name="[61]"></a>BTIM_ITConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cw32l031_btim.o(i.BTIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_init
</UL>

<P><STRONG><a name="[62]"></a>BTIM_TimeBaseInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, cw32l031_btim.o(i.BTIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_init
</UL>

<P><STRONG><a name="[63]"></a>BTIM_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i.BTIM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BTIM_init &rArr; BTIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_TimeBaseInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ITConfig
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_init
</UL>

<P><STRONG><a name="[64]"></a>Calt</STRONG> (Thumb, 668 bytes, Stack size 40 bytes, main.o(i.Calt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Calt &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fft_Imagclear
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f]"></a>DMACH1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_cw32l031.o(i.DMACH1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMACH1_IRQHandler &rArr; DMACH1_IRQHandlerCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH1_IRQHandlerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMACH1_IRQHandlerCallback</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.DMACH1_IRQHandlerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMACH1_IRQHandlerCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH1_IRQHandler
</UL>

<P><STRONG><a name="[10]"></a>DMACH23_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_cw32l031.o(i.DMACH23_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMACH23_IRQHandler &rArr; DMACH23_IRQHandlerCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH23_IRQHandlerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMACH23_IRQHandlerCallback</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main.o(i.DMACH23_IRQHandlerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMACH23_IRQHandlerCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH23_IRQHandler
</UL>

<P><STRONG><a name="[11]"></a>DMACH4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.DMACH4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cw32l031_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configration
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH23_IRQHandlerCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH1_IRQHandlerCallback
</UL>

<P><STRONG><a name="[6e]"></a>DMA_Cmd</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, cw32l031_dma.o(i.DMA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configration
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH23_IRQHandlerCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH1_IRQHandlerCallback
</UL>

<P><STRONG><a name="[72]"></a>DMA_Configration</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, main.o(i.DMA_Configration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA_Configration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_init
</UL>

<P><STRONG><a name="[6f]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cw32l031_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH23_IRQHandlerCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH1_IRQHandlerCallback
</UL>

<P><STRONG><a name="[6c]"></a>DMA_GetITStatus</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, cw32l031_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH23_IRQHandlerCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH1_IRQHandlerCallback
</UL>

<P><STRONG><a name="[74]"></a>DMA_ITConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, cw32l031_dma.o(i.DMA_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configration
</UL>

<P><STRONG><a name="[73]"></a>DMA_Init</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, cw32l031_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configration
</UL>

<P><STRONG><a name="[66]"></a>FFT</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, fft.o(i.FFT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FFT
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
</UL>

<P><STRONG><a name="[9]"></a>FLASHRAM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.FLASHRAM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>FLASH_SetLatency</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cw32l031_flash.o(i.FLASH_SetLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_SetLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[65]"></a>Fft_Imagclear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fft.o(i.Fft_Imagclear))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
</UL>

<P><STRONG><a name="[83]"></a>FirmwareDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, system_cw32l031.o(i.FirmwareDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FirmwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[b]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.GPIOA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_cw32l031.o(i.GPIOB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOB_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_IRQHandlerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.GPIOC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOF_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.GPIOF_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPIO_Init</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, cw32l031_gpio.o(i.GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
</UL>

<P><STRONG><a name="[5d]"></a>GPIO_ReadPin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cw32l031_gpio.o(i.GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandlerCallback
</UL>

<P><STRONG><a name="[59]"></a>GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32l031_gpio.o(i.GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandlerCallback
</UL>

<P><STRONG><a name="[77]"></a>GPIO_init</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, main.o(i.GPIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_init
</UL>

<P><STRONG><a name="[16]"></a>GTIM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.GTIM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GTIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.GTIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GTIM_Cmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cw32l031_gtim.o(i.GTIM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandlerCallback
</UL>

<P><STRONG><a name="[79]"></a>GTIM_OCInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, cw32l031_gtim.o(i.GTIM_OCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_OCInit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_init
</UL>

<P><STRONG><a name="[5a]"></a>GTIM_SetCompare1</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cw32l031_gtim.o(i.GTIM_SetCompare1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_SetCompare1
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandlerCallback
</UL>

<P><STRONG><a name="[5b]"></a>GTIM_SetCompare2</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cw32l031_gtim.o(i.GTIM_SetCompare2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_SetCompare2
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandlerCallback
</UL>

<P><STRONG><a name="[7a]"></a>GTIM_TimeBaseInit</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, cw32l031_gtim.o(i.GTIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_init
</UL>

<P><STRONG><a name="[7b]"></a>GTIM_init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, main.o(i.GTIM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GTIM_init &rArr; GTIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_TimeBaseInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare2
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare1
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OCInit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>KEY_IRQHandlerCallback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.KEY_IRQHandlerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>LCD_Address_Set</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, lcd_init.o(i.LCD_Address_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteIndex
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowBattey
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[7f]"></a>LCD_DrawPoint</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_DrawPoint &rArr; LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowBattey
</UL>

<P><STRONG><a name="[80]"></a>LCD_Fill</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lcd.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_Fill &rArr; LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transverse_UI_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_UI_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Power
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowBoxing
</UL>

<P><STRONG><a name="[81]"></a>LCD_GPIO_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd_init.o(i.LCD_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[82]"></a>LCD_Init</STRONG> (Thumb, 602 bytes, Stack size 8 bytes, lcd_init.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Init &rArr; LCD_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareDelay
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteIndex
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transverse_UI_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_UI_init
</UL>

<P><STRONG><a name="[85]"></a>LCD_ShowBattey</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, lcd.o(i.LCD_ShowBattey))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LCD_ShowBattey &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transverse_UI_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_UI_init
</UL>

<P><STRONG><a name="[86]"></a>LCD_ShowBoxing</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, lcd.o(i.LCD_ShowBoxing))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LCD_ShowBoxing &rArr; LCD_Fill &rArr; LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_show
</UL>

<P><STRONG><a name="[88]"></a>LCD_ShowChar</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, lcd.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[89]"></a>LCD_ShowFloatNum</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, lcd.o(i.LCD_ShowFloatNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = LCD_ShowFloatNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_show
</UL>

<P><STRONG><a name="[8c]"></a>LCD_ShowIntNum</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, lcd.o(i.LCD_ShowIntNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = LCD_ShowIntNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_show
</UL>

<P><STRONG><a name="[8d]"></a>LCD_ShowString</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, lcd.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transverse_UI_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_UI_init
</UL>

<P><STRONG><a name="[8e]"></a>LCD_Show_Power</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, lcd.o(i.LCD_Show_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LCD_Show_Power &rArr; LCD_Fill &rArr; LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_show
</UL>

<P><STRONG><a name="[7e]"></a>LCD_WR_DATA</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_init.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[8f]"></a>LCD_Writ_Bus</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lcd_init.o(i.LCD_Writ_Bus))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteIndex
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>

<P><STRONG><a name="[90]"></a>LCD_show</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, main.o(i.LCD_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = LCD_show &rArr; LCD_ShowIntNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Power
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowBoxing
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>LVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.LVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>Lcd_WriteData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd_init.o(i.Lcd_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lcd_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[7d]"></a>Lcd_WriteIndex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_init.o(i.Lcd_WriteIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>NVIC_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(i.NVIC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_init
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>RCC_HCLKPRS_Config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, cw32l031_rcc.o(i.RCC_HCLKPRS_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_HCLKPRS_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[95]"></a>RCC_HSI_Enable</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, cw32l031_rcc.o(i.RCC_HSI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_HSI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[96]"></a>RCC_PCLKPRS_Config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, cw32l031_rcc.o(i.RCC_PCLKPRS_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_PCLKPRS_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[98]"></a>RCC_SystemCoreClockUpdate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cw32l031_rcc.o(i.RCC_SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[97]"></a>RCC_init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, main.o(i.RCC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_init &rArr; RCC_PCLKPRS_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SystemCoreClockUpdate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLKPRS_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSI_Enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKPRS_Config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_init
</UL>

<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>SYS_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.SYS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SYS_init &rArr; UART2_init &rArr; USART_Init &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transverse_UI_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configration
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cw32l031_systick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_cw32l031.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[23]"></a>SystemInit</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, system_cw32l031.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.UART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>UART2_init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, main.o(i.UART2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UART2_init &rArr; USART_Init &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_init
</UL>

<P><STRONG><a name="[1f]"></a>UART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.UART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>USART_GetFlagStatus</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cw32l031_uart.o(i.USART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[9c]"></a>USART_Init</STRONG> (Thumb, 666 bytes, Stack size 56 bytes, cw32l031_uart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USART_Init &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_init
</UL>

<P><STRONG><a name="[9e]"></a>USART_SendData_8bit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cw32l031_uart.o(i.USART_SendData_8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_SendData_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[14]"></a>VC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.VC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>VC2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.VC2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>Vertical_UI_init</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, lcd.o(i.Vertical_UI_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Vertical_UI_init &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowBattey
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandlerCallback
</UL>

<P><STRONG><a name="[6]"></a>WDT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l031.o(i.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l031.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>__0printf$1</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b4]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[70]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH23_IRQHandlerCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH1_IRQHandlerCallback
</UL>

<P><STRONG><a name="[3f]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4b]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cw32l031_adc.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[b5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a1]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[48]"></a>assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData_8bit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLKPRS_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSI_Enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKPRS_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_TimeBaseInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare2
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare1
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OCInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_Cmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_TimeBaseInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ITConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_GetITStatus
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_Cmd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ClearITPendingBit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr0ChannelCfg
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr07ChannelCfg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr06ChannelCfg
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr05ChannelCfg
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr04ChannelCfg
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr03ChannelCfg
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr02ChannelCfg
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr01ChannelCfg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSerialCh
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetITStatus
</UL>

<P><STRONG><a name="[25]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; USART_SendData_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData_8bit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; SYS_init &rArr; UART2_init &rArr; USART_Init &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transverse_UI_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vertical_UI_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareDelay
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_Cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_show
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8b]"></a>mypow</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd.o(i.mypow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mypow
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowIntNum
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloatNum
</UL>

<P><STRONG><a name="[67]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calt
</UL>

<P><STRONG><a name="[5f]"></a>transverse_UI_init</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, lcd.o(i.transverse_UI_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = transverse_UI_init &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowBattey
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandlerCallback
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[93]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_init
</UL>

<P><STRONG><a name="[92]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_init
</UL>

<P><STRONG><a name="[a0]"></a>_printf_core</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
